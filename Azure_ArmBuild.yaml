parameters:

- name: serviceConnection
  type: string

- name: imageACR
  type: string

- name: imageRepository
  type: string

- name: dockerfilePath
  type: string
  default: 'Dockerfile'

- name: tags
  type: string
  default: "latest,template"

- name: dockerBuildArgs
  type: string
  default: ''

- name: buildContext
  type: string
  default: "."

- name: azureTaskType
  type: string
  default: "powershell" #cli

steps:
- ${{if eq(parameters.azureTaskType, 'cli')}}:

  - task: AzureCLI@2
    name: BuildImageAcrARM
    displayName: "ARM Docker Build Image"
    inputs:
      azureSubscription: '${{ parameters.serviceConnection }}'
      scriptType: 'pscore'
      scriptLocation: 'inlineScript'
      inlineScript: |
        try {
          $registry = "${{ parameters.imageACR }}.azurecr.io"
          docker build -f ${{parameters.dockerfilePath}} -t buildimage ${{parameters.dockerBuildArgs}} ${{ parameters.buildContext }}
          if (!$?) {
              throw "docker build failed"
            }
          $tagsInput = "${{parameters.tags}}"
          $tags = If ($tagsInput) { $tagsInput -split "[\n,]+" } Else { @() }
          Foreach ( $tag in $tags){
            $imagetag = "$registry/${{ parameters.imageRepository }}:$tag"
            docker image tag buildimage $imagetag 
          }
          docker image ls
        }
        catch {
          throw $_
        }

- ${{ else }}:

  - task: AzurePowerShell@5
    name: BuildImageAcr
    displayName: "ARM Docker Build Image"
    inputs:
      azureSubscription: ${{parameters.serviceConnection}}
      azurePowerShellVersion: latestVersion
      failOnStandardError: false
      pwsh: true
      scriptType: inlineScript
      inline: |
        try {
          $registry = "${{ parameters.imageACR }}.azurecr.io"
          docker build -f ${{parameters.dockerfilePath}} -t buildimage ${{parameters.dockerBuildArgs}} ${{ parameters.buildContext }}
          if (!$?) {
              throw "docker build failed"
            }
          $tagsInput = "${{parameters.tags}}"
          $tags = If ($tagsInput) { $tagsInput -split "[\n,]+" } Else { @() }
          Foreach ( $tag in $tags){
            $imagetag = "$registry/${{ parameters.imageRepository }}:$tag"
            docker image tag buildimage $imagetag 
          }
          docker image ls
        }
        catch {
          throw $_
        }
